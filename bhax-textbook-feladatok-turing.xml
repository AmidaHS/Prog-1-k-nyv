<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0" xml:lang="hu">
    <info>
        <title>Helló, Turing!</title>
        <keywordset>
            <keyword/>
        </keywordset>
    </info>
    <section>
        <title>Végtelen ciklus</title>
        <para>
            Írj olyan C végtelen ciklusokat, amelyek 0 illetve 100 százalékban dolgoztatnak egy magot és egy olyat, amely  
            100 százalékban minden magot!
        </para>
        <para>
            Megoldás videó:
        </para>
        <para>
            Megoldás forrása: 1magszázon: <link xlink:href="https://gist.github.com/AmidaHS/731835bde99e9ca5665f1e3f6fd5337b#file-egymagszaz-c">https://gist.github.com/AmidaHS/731835bde99e9ca5665f1e3f6fd5337b#file-egymagszaz-c</link>
            összesmagszázon: <link xlink:href="https://gist.github.com/AmidaHS/cef6c1eae814cbdc26593074ea0aa7c0#file-osszesmag-c">https://gist.github.com/AmidaHS/cef6c1eae814cbdc26593074ea0aa7c0#file-osszesmag-c</link>
             1 mag 0%-on: <link xlink:href="https://gist.github.com/AmidaHS/f9c09cfe39cebdf80eb0f9f59585e04c">https://gist.github.com/AmidaHS/f9c09cfe39cebdf80eb0f9f59585e04c</link>
             
        </para>
        <para>
            Tanulságok, tapasztalatok, magyarázat...
            1mag 100%: Írunk egy alapvető végtelen ciklust,a feltétel mindig teljesül.Így a használt mag mindvégig dolgozni fog.
            összes mag 100%: Előzőhöz hasonló annyi különbséggel, hogy a #pragma omp parallel -el párhuzamosítjuk és így egyszerre több magon fogja ugyanazt elvégezni.
            1mag 0%: Az előzőekhez hasonló, kivétel hogy a sleep függvény segítségével altatjuk a programot, ezálltal futni fog, de nem használja a cpu-t.
        </para>            
    </section>        
        
    <section>
        <title>Lefagyott, nem fagyott, akkor most mi van?</title>
        <para>
            Mutasd meg, hogy nem lehet olyan programot írni, amely bármely más programról eldönti, hogy le fog-e fagyni vagy sem!
        </para>
        <para>
            Megoldás videó:
        </para>
        <para>
            Megoldás forrása:  tegyük fel, hogy akkora haxorok vagyunk, hogy meg tudjuk írni a <function>Lefagy</function>
            függvényt, amely tetszőleges programról el tudja dönteni, hogy van-e benne vlgtelen ciklus:              
        </para>
        <programlisting language="c"><![CDATA[Program T100
{

	boolean Lefagy(Program P)
	{
		 if(P-ben van végtelen ciklus)
			return true;
		 else
			return false; 
	}

	main(Input Q)
	{
		Lefagy(Q)
	}
}]]></programlisting>            
        <para>
            A program futtatása, például akár az előző <filename>v.c</filename> ilyen pszeudókódjára:
            <screen><![CDATA[T100(t.c.pseudo)
true]]></screen>            
            akár önmagára
            <screen><![CDATA[T100(T100)
false]]></screen>  
            ezt a kimenetet adja.          
        </para>
        <para>
            A T100-as programot felhasználva készítsük most el az alábbi T1000-set, amelyben a
            Lefagy-ra épőlő Lefagy2 már nem tartalmaz feltételezett, csak csak konkrét kódot:
        </para>
        <programlisting language="c"><![CDATA[Program T1000
{

	boolean Lefagy(Program P)
	{
		 if(P-ben van végtelen ciklus)
			return true;
		 else
			return false; 
	}

	boolean Lefagy2(Program P)
	{
		 if(Lefagy(P))
			return true;
		 else
			for(;;); 
	}

	main(Input Q)
	{
		Lefagy2(Q)
	}

}]]></programlisting>            
        <programlisting><![CDATA[]]></programlisting>            
        <para>
            Mit for kiírni erre a <computeroutput>T1000(T1000)</computeroutput> futtatásra?
                                
            <itemizedlist>
                <listitem>
                    <para>Ha T1000 lefagyó, akkor nem fog lefagyni, kiírja, hogy true</para>                        
                </listitem>
                <listitem>
                    <para>Ha T1000 nem fagyó, akkor pedig le fog fagyni...</para>                        
                </listitem>
            </itemizedlist>
            akkor most hogy fog működni? Sehogy, mert ilyen <function>Lefagy</function>
            függvényt, azaz a T100 program nem is létezik.                
        </para>
        <para>
            Tanulságok, tapasztalatok, magyarázat...
            Egy paradoxont kapunk, mivel nem létezik olyan program ami eltudja dönteni egy programról hogy lefagy-e, mivel ha a program tartalmaz végtelen ciklust, akkor végtelen ideig tudná vizsgálni is.
        </para>
    </section>        
                
    <section>
        <title>Változók értékének felcserélése</title>
        <para>
            Írj olyan C programot, amely felcseréli két változó értékét, bármiféle logikai utasítás vagy kifejezés
            nasználata nélkül!
        </para>
        <para>
            Megoldás videó: <link xlink:href="https://bhaxor.blog.hu/2018/08/28/10_begin_goto_20_avagy_elindulunk">https://bhaxor.blog.hu/2018/08/28/10_begin_goto_20_avagy_elindulunk</link>
        </para>
        <para>
            Megoldás forrása: <link xlink:href="https://gist.github.com/AmidaHS/9fef6c7e5ddeb6df52e6e59803c3a03a">https://gist.github.com/AmidaHS/9fef6c7e5ddeb6df52e6e59803c3a03a</link> 
            
        </para>
        <para>
            Tanulságok, tapasztalatok, magyarázat...
            Ennek a feladatnak a megoldásához csupán összeadni és kivonni kell, semmi nehezebb programozás nincs benne.Az elején bekérünk 2 egész számot. Majd a számításokat elvégeztetjük.
        </para>
    </section>                     

    <section>
        <title>Labdapattogás</title>
        <para>
            Először if-ekkel, majd bármiféle logikai utasítás vagy kifejezés
            nasználata nélkül írj egy olyan programot, ami egy labdát pattogtat a karakteres konzolon! (Hogy mit értek
            pattogtatás alatt, alább láthatod a videókon.)
        </para>
        <para>
            Megoldás videó: <link xlink:href="https://bhaxor.blog.hu/2018/08/28/labdapattogas">https://bhaxor.blog.hu/2018/08/28/labdapattogas</link>
        </para>
        <para>
            Megoldás forrása:  
        </para>
        <para>
            if-fel: <link xlink:href="https://gist.github.com/AmidaHS/b10c0ad17f7d8519a61cb8d8fb8d68e7">https://gist.github.com/AmidaHS/b10c0ad17f7d8519a61cb8d8fb8d68e7</link>
        </para>
        <para>
            if nélkül: <link xlink:href="https://gist.github.com/AmidaHS/74d6abc5206e0365597ff246ed252522">https://gist.github.com/AmidaHS/74d6abc5206e0365597ff246ed252522</link>
        </para>
        <para>
            Tanulságok, tapasztalatok, magyarázat..
            IF-fel:A program során megadjuk a képernyőtávot ahol a program lefuthat, a labda helyzetét.Írunk egy végtelen ciklust, ami adja meg a "labdapattogást". A usleep segítségével fogjuk a labda sebességét megváltoztatni,míg a refreshel a képernyőt fogjuk "tisztán" tartani. Az if-es sorok fogják megadni hogy a labda hogyan pattanjon egyik falról a másikra.
            IF nélkül: Hasonló annyi különbséggel, hogy itt nem az if-fel hanem a mvprintw segítségével deklaráljuk le a mozgást is.
        </para>
    </section>                     

    <section>
        <title>Szóhossz és a Linus Torvalds féle BogoMIPS</title>
        <para>
            Írj egy programot, ami megnézi, hogy hány bites a szó a gépeden, azaz mekkora az <type>int</type> mérete.
            Használd ugyanazt a while ciklus fejet, amit Linus Torvalds a BogoMIPS rutinjában! 
        </para>
        <para>
            Megoldás videó: <link xlink:href=""></link>
        </para>
        <para>
            Megoldás forrása: <link xlink:href="https://gist.github.com/AmidaHS/d148a9fe32cdcd71c960583fccb841da">https://gist.github.com/AmidaHS/d148a9fe32cdcd71c960583fccb841da</link>
        </para>
        <para>
             Tanulságok, tapasztalatok, magyarázat... A számláláshoz bitshiftelést használtam. Bővebben:(Forrás:Wikipédia: <link xlink:href="https://hu.wikipedia.org/wiki/Bitm%C5%B1velet">https://hu.wikipedia.org/wiki/Bitm%C5%B1velet</link> ) A biteltolást (bit shift) is szokás bitműveletnek tekinteni, mivel nem számértékeken, hanem bitek sorozatán dolgozik. A biteltolás során a bináris számjegyek balra vagy jobbra tolódnak el („shift”-elődnek). Mivel a processzor regiszterei fix szélességűek, ezért egy vagy több bit ki fog shiftelődni a regiszter valamelyik végén, a másikon pedig ugyanannyi bit beshiftelődik; a biteltolási műveletek közötti különbséget épp az adja, hogy a beshiftelődő bitek értékét honnan vesszük.
        </para>
    </section>                     

    <section>
        <title>Helló, Google!</title>
        <para>
            Írj olyan C programot, amely egy 4 honlapból álló hálózatra kiszámolja a négy lap Page-Rank 
            értékét!
        </para>
        <para>
            Megoldás videó: <link xlink:href=""></link>
        </para>
        <para>
            Megoldás forrása: <link xlink:href="https://gist.github.com/AmidaHS/d186c35ffaac9db8e25a97fe64458633">https://gist.github.com/AmidaHS/d186c35ffaac9db8e25a97fe64458633</link>
        </para>
        <para>
            Tanulságok, tapasztalatok, magyarázat... 
            Ezt a Page Rank rendszert a Google alapítói találták ki Larry Page és Sergey Brin. Ennek a rendszernek a lényege, hogy egyfajta "szavazásra" épít, egy weboldalra minél több hiperlink tartozik annál jobbnak minősül, de ez oda-vissza működik, azaz aki "leadja a szavazatot" arra hányan szavaztak. Ez alapján állít fel egy fontossági sorrendet. Többek között ennek köszönheti a Google a sikereinek titkát.
        </para>
    </section>

    <section xml:id="Brun">
        <title>100 éves a Brun tétel</title>
        <para>
            Írj R szimulációt a Brun tétel demonstrálására!
        </para>
        <para>
            Megoldás videó: <link xlink:href="https://youtu.be/xbYhp9G6VqQ">https://youtu.be/xbYhp9G6VqQ</link>
        </para>
        <para>
            Megoldás forrása: <link xlink:href="https://gitlab.com/nbatfai/bhax/blob/master/attention_raising/Primek_R">https://gitlab.com/nbatfai/bhax/blob/master/attention_raising/Primek_R</link>
        </para>
        <para>
            Tanulságok, tapasztalatok, magyarázat...
            A brun tétel Viggo Brun nevéhez fűződik, aki 1919-ben bizonyította ezt be.Tételének lényege az ikerprímekhez köthető, azaz olyan prímpárokat keresett amelyeknek különbsége 2.Rájött hogy ezen prímek reciprokösszege egy később "Brun-konstans"-ként elnevezett ismert véges értékhez konvergál.
            Az R nyelves programunkhoz szükség van először is a matlab függvénykönyvtárra,ezután létrehozzuk az stp függvényünket.
            Programunk bekér egy paramétert, majd a matlabos primes függvénynek köszönhetően az adott értékig kiírja az összes prím számot.A diff résznél azt fogjuk tárolni, hogy a prímek között mekkora érték különbség található.Az idx-ben pedig az előző értékekből keresi azokat amelyeknek a különbsége 2.Ezeket megkeresve már csak a Brun-tételt kell alkalmazni. Utána már csak azokat az adatokat adjuk meg amelyek ahhoz kellenek, ami a matlab általl nyújtottak, ahoz hogy kirajzolódhasson a függvényünk.Pl:Megadjuk x és y értékét, milyen lépésközzel haladjunk, vagy maga a grafikon kiiratása a plot segítségével hogyan történjen.
        </para>
    </section>
    
    <section xml:id="bhax-textbook-feladatok-turing.MontyHall">
        <title>A Monty Hall probléma</title>
        <para>
            Írj R szimulációt a Monty Hall problémára!
        </para>
        <para>
            Megoldás videó: <link xlink:href="https://bhaxor.blog.hu/2019/01/03/erdos_pal_mit_keresett_a_nagykonyvben_a_monty_hall-paradoxon_kapcsan">https://bhaxor.blog.hu/2019/01/03/erdos_pal_mit_keresett_a_nagykonyvben_a_monty_hall-paradoxon_kapcsan</link>
        </para>
        <para>
            Megoldás forrása: <link xlink:href="https://gitlab.com/nbatfai/bhax/tree/master/attention_raising/MontyHall_R">https://gitlab.com/nbatfai/bhax/tree/master/attention_raising/MontyHall_R</link>
        </para>
        <para>
        Tanulságok, tapasztalatok, magyarázat...
            A probléma, hogy létezik három választási lehetőség, egy nyertes valamilyen nagy értékkel még kettő üres, vagy valami értéktelen tárgyal. 
            A játékos nyereménye a válaszától függ, de először a játékos csak választ és ahelyett, hogy véget érne a játék a műsorvezető a két megmaradt lehetőség közül megmutatja az egyik vesztest.
            A játékvezető tudja melyik nyer és veszít. Ezután megkérdezi a játékost, hogy akar-e változtatni. A játékos ezután vagy változtat, vagy nem.
            Ezután a játékos megtudja, hogy mit rejt a választása. A paradoxon az, hogy érdemes-e változtatni, illetve hogy számít-e ez egyáltalán?
            És igen érdemes mivel valószínűség számításból kiindulva ha 3 lehetőség közül választunk egyet akkor abban a pillanatban mindegyik válasz 1/3 esélyt rejt arra, hogy nyertes legyen.
            Így az összes lehetőség úgymond 1/3nak felel meg, de ezt követően mivel a másik két lehetőség közös változóként lép fel és az egyik kinyílik így annak a valószínűsége 0 lesz és az ő 1/3 átmegy a másikra amlyeiket nem választottuk ezáltál 2/3os nyerési esélyt kap. 
            Az R nyelves programunk ezt az esetet bizonyítja a megadott számú ismétléssel a véletlenszerűséget felhasználva és a játékos egyéni döntései alapján.
        </para>
    </section>

</chapter>                
